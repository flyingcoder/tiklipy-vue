name: Deploy Tiklipy Application

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:

      - name: Get Github action IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Setting environment variables..
        run: |
          echo "AWS_DEFAULT_REGION=ap-southeast-1" &gt;&gt; $GITHUB_ENV
          echo "AWS_SG_NAME=default" &gt;&gt; $GITHUB_ENV

      - name: Add Github Actions IP to Security group
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
        run: |
          aws ec2 authorize-security-group-ingress --group-name ${{ env.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32    

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Prepare env variables
        uses: danielr1996/envsubst-action@1.0.0
        with:
          input: .env.example
          output: .env
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTHDOMAIN: ${{ secrets.VITE_FIREBASE_AUTHDOMAIN }}
          VITE_FIREBASE_PROJECTID: ${{ secrets.VITE_FIREBASE_PROJECTID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
          STRIPE_APP_KEY: ${{ secrets.STRIPE_APP_KEY }}
          STRIPE_APP_PLAN: ${{ secrets.STRIPE_APP_PLAN }}
          FIREBASE_TYPE: ${{ secrets.FIREBASE_TYPE }}
          FIREBASE_PROJECTID: ${{ secrets.FIREBASE_PROJECTID }}
          FIREBASE_PRIVATE_KEY_ID: ${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
          FIREBASE_CLIENT_ID: ${{ secrets.FIREBASE_CLIENT_ID }}
          FIREBASE_AUTH_URI: ${{ secrets.FIREBASE_AUTH_URI }}
          FIREBASE_TOKEN_URI: ${{ secrets.FIREBASE_TOKEN_URI }}
          FIREBASE_AUTH_PROVIDER_CERT_URL: ${{ secrets.FIREBASE_AUTH_PROVIDER_CERT_URL }}
          FIREBASE_CLIENT_CERT_URL: ${{ secrets.FIREBASE_CLIENT_CERT_URL }}
          FIREBASE_UNIVERSE_DOMAIN: ${{ secrets.FIREBASE_UNIVERSE_DOMAIN }}

      - name: Build docker container then archive it
        run: |
          cd $GITHUB_WORKSPACE
          docker build -t tiklipy.dock .
          docker save -o tiklipy.dock.tar tiklipy.dock

      - name: Caching docker
        uses: actions/cache@v3
        with:
          path: tiklipy.dock.tar
          key: jobBuildContainer-${{ github.sha }}
      
      - name: Copy docker container to server
        uses: burnett01/rsync-deployments@4.1
        with:
          switches: -avzr --delete
          path: tiklipy.dock.tar
          remote_path: /home/${{ secrets.SSH_USERNAME }}/tiklipy.dock.tar
          remote_host: ${{ secrets.SSH_HOST }}
          remote_user: ${{ secrets.SSH_USERNAME }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Run container
        uses: appleboy/ssh-action@master
        env:
          USERNAME: ${{ secrets.SSH_USERNAME }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: USERNAME
          script: |
            cd /home/$USERNAME
            docker load -i tiklipy.dock.tar
            docker stop tiklipy
            docker rm tiklipy
            docker run -d -p 3000:3000 --restart unless-stopped --name tiklipy tiklipy.dock
      
      - name: Remove Github Actions IP from security group
        run: |
          aws ec2 revoke-security-group-ingress --group-name ${{ env.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
        if: always()